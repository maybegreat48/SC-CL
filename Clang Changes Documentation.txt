=====================================================================
llvm_src\tools\clang\lib\Sema\SemaDeclAttr.cpp
=====================================================================

Function additions
----------------------------------------

static void handleIntrinsicAttribute(Sema &S, Decl *D, const ParsedAttr &Attr) {
  if (isa<FunctionDecl>(D)) {
    const FunctionDecl *fDecl = cast<FunctionDecl>(D);
    if (fDecl->getStorageClass() != SC_Extern) {
      S.Diag(Attr.getLoc(), diag::err_intrin_non_extern);
    } else {
      if (Attr.getNumArgs() == 1) {
        bool isUnsafe;
        if (Attr.getArgAsExpr(0)->EvaluateAsBooleanCondition(isUnsafe,
                                                             S.Context)) {
          D->addAttr(::new (S.Context) IntrinsicFuncAttr(
              S.Context, {Attr.getRange()}, isUnsafe));
        } else {
          S.Diag(Attr.getLoc(), diag::err_intrin_unknown_arg);
        }
      } else {
        D->addAttr(::new (S.Context)
                       IntrinsicFuncAttr(S.Context, {Attr.getRange()}));
      }
    }
  } else {
    S.Diag(Attr.getLoc(), diag::err_intrin_not_func);
  }
}

static void handleGlobalAttribute(Sema &S, Decl *D, const ParsedAttr &Attr) {
  if (Attr.getNumArgs() == 1) {
    uint32_t index;
    if (checkUInt32Argument(S, Attr, Attr.getArgAsExpr(0), index) &&
        index < 0x1000000) {
      D->addAttr(::new (S.Context)
                     GlobalVariableAttr(S.Context, {Attr.getRange()}, index));
    } else {
      S.Diag(Attr.getLoc(), diag::err_global_var_index_out_of_range);
    }
  } else {
    S.Diag(Attr.getLoc(), diag::err_global_var_index_not_specified);
  }
}

static void handleNativeAttribute(Sema &S, Decl *D, const ParsedAttr &Attr) {
  if (isa<FunctionDecl>(D)) {
    const FunctionDecl *fDecl = cast<FunctionDecl>(D);
    if (fDecl->getStorageClass() != SC_Extern) {
      S.Diag(Attr.getLoc(), diag::err_native_non_extern);
    } else {
      switch (Attr.getNumArgs()) {
      case 0:
        D->addAttr(::new (S.Context)
                       NativeFuncAttr(S.Context, {Attr.getRange()}));
        return;
      case 1: {
        uint32_t lowDWord;
        if (checkUInt32Argument(S, Attr, Attr.getArgAsExpr(0), lowDWord)) {
          D->addAttr(::new (S.Context) NativeFuncAttr(
              S.Context, {Attr.getRange()}, lowDWord, 0));
          return;
        }
        break;
      }
      case 2: {
        uint32_t lowDWord;
        uint32_t hiDWord;
        if (checkUInt32Argument(S, Attr, Attr.getArgAsExpr(0), lowDWord) &&
            checkUInt32Argument(S, Attr, Attr.getArgAsExpr(1), hiDWord)) {
          D->addAttr(::new (S.Context) NativeFuncAttr(
              S.Context, {Attr.getRange()}, lowDWord, hiDWord));
          return;
        }
        break;
      }
      }
      S.Diag(Attr.getLoc(), diag::err_native_hash_invalid_args);
    }
  } else {
    S.Diag(Attr.getLoc(), diag::err_native_not_func);
  }
}


ProcessDeclAttribute Attr.getKind() switch additions
------------------------------
case ParsedAttr::AT_IntrinsicFunc:
  handleIntrinsicAttribute(S, D, Attr);
  break;

case ParsedAttr::AT_NativeFunc:
  handleNativeAttribute(S, D, Attr);
  break;

case ParsedAttr::AT_GlobalVariable:
  handleGlobalAttribute(S, D, Attr);
  break;
 
case ParsedAttr::AT_UnsafeFunc:
  handleSimpleAttribute<UnsafeFuncAttr>(S, D, Attr);
  break;

=====================================================================
llvm_src\tools\clang\include\clang\Basic\DiagnosticSemaKinds.td
=====================================================================

CategoryName = "Semantic Issue" additions
----------------------------------------

// joaat_error
def err_joaat_nonconstant_string_argument : Error<
  "Argument for jenkins_hash must be a constant string">;

// natives
def err_native_hash_invalid_args : Error<
  "Invalid arguments for native attribute">;
def err_native_non_extern : Error<
  "Native attribute can only be used on functions marked as extern">;
def err_intrin_non_extern : Error<
  "Intrinsic attribute can only be used on functions marked as extern">;
def err_native_not_func : Error<
  "Native attribute can only be used on function definitions">;
def err_intrin_not_func : Error<
  "Intrinsic attribute can only be used on function definitions">;
def err_intrin_unknown_arg : Error<
  "Intrinsic attribute argument must be true (1) or false(0)">;

def err_global_var_index_not_specified : Error<
  "Global Index argument not specified">;
def err_global_var_index_out_of_range : Error<
  "Global Index must be in range 0 - 16,777,215">; 

=====================================================================
llvm_src\tools\clang\include\clang\Basic\Attr.td
=====================================================================

under Attributes begin here comment
----------------------------------------

def IntrinsicFunc : InheritableAttr {
  let Spellings = [GNU<"intrinsic">, Declspec<"intrinsic">];
  let Subjects = SubjectList<[Function]>;
  let Documentation = [Undocumented];
  let Args = [DefaultBoolArgument<"isUnsafe", 0>];
}

def UnsafeFunc : InheritableAttr {
  let Spellings = [GNU<"unsafe">, Declspec<"unsafe">];
  let Subjects = SubjectList<[Function]>;
  let Documentation = [Undocumented];
}

def NativeFunc : InheritableAttr {
  let Spellings = [GNU<"native">, Declspec<"native">];
  let Subjects = SubjectList<[Function]>;
  let Documentation = [Undocumented];
  let Args = [UnsignedArgument<"hash", 1>, UnsignedArgument<"x64HiDwordHash", 1>];
}

def GlobalVariable : InheritableAttr {
  let Spellings = [GNU<"scriptglobal">, Declspec<"scriptglobal">];
  let Subjects = SubjectList<[GlobalVar], ErrorDiag, "ExpectedVariable">;
  let Documentation = [Undocumented];
  let Args = [UnsignedArgument<"index">];
}

=====================================================================
llvm_src\tools\clang\include\clang\Basic\TypeTraits.h
=====================================================================

in the enum UnaryExprOrTypeTrait add to the bottom
----------------------------------------

UETT_JenkinsHash

=====================================================================
llvm_src\tools\clang\include\clang\Basic\TokenKinds.def
=====================================================================

bottom of C99 6.4.1: Keywords add
----------------------------------------

KEYWORD(joaat                       , KEYALL)
KEYWORD(hashof                      , KEYALL)

=====================================================================
llvm_src\tools\clang\lib\AST\ExprConstant.cpp
=====================================================================

in bool IntExprEvaluator::VisitUnaryExprOrTypeTraitExpr in switch E->getKind() add case
----------------------------------------

  case UETT_JenkinsHash: {
	  const Expr* arg = E->getArgumentExpr()->IgnoreParens();
	  if (isa<StringLiteral>(arg))
	  {
		  std::string str = cast<StringLiteral>(arg)->getString().str();
		  char *key = (char*)str.c_str();
		  unsigned int hash, i;
		  for(hash = i = 0;; i++)
		  {
			  if(key[i] == '\0')
				  break;
			  hash += tolower(key[i]);
			  hash += (hash << 10);
			  hash ^= (hash >> 6);
		  }
		  hash += (hash << 3);
		  hash ^= (hash >> 11);
		  hash += (hash << 15);
		  return Success(llvm::APInt(32, (int)hash, true), E);
	  }
	  return false;
  }

=====================================================================
llvm_src\tools\clang\lib\AST\ItaniumMangle.cpp
=====================================================================

add under case UETT_OpenMPRequiredSimdAlign
----------------------------------------

case UETT_JenkinsHash:
		Out << 'j';
		break;
		
=====================================================================
llvm_src\tools\clang\lib\AST\StmtPrinter.cpp
=====================================================================

add under case UETT_OpenMPRequiredSimdAlign
----------------------------------------
	
  case UETT_JenkinsHash:
	  OS << "joaat";
	  break;
	  
=====================================================================
llvm_src\tools\clang\lib\CodeGen\CGExprScalar.cpp
=====================================================================

add under UETT_OpenMPRequiredSimdAlign
----------------------------------------
	  
else if (E->getKind() == UETT_JenkinsHash){
	  const Expr * arg = E->getArgumentExpr()->IgnoreParens();
	  if (isa<StringLiteral>(arg))
	  {
		  std::string str = cast<StringLiteral>(arg)->getString().str();
		  char *key = (char*)str.c_str();
		  unsigned int hash, i;
		  for(hash = i = 0;; i++)
		  {
			  if(key[i] == '\0')
				  break;
			  hash += tolower(key[i]);
			  hash += (hash << 10);
			  hash ^= (hash >> 6);
		  }
		  hash += (hash << 3);
		  hash ^= (hash >> 11);
		  hash += (hash << 15);
		  return llvm::ConstantInt::get(CGF.IntTy, (int)hash, true);
	  }
  }


=====================================================================
llvm_src\tools\clang\lib\Parse\ParseExpr.cpp
=====================================================================

in function ParseCastExpression add above case kw___builtin_omp_required_simd_align to fall down into the same return
----------------------------------------

  case tok::kw_hashof:
  case tok::kw_joaat:

in function ParseExprAfterUnaryExprOrTypeTrait in the assert at the top add behind tok::kw___builtin_omp_required_simd_align
----------------------------------------

  , tok::kw_hashof, tok::kw_joaat

in function ParseUnaryExprOrTypeTraitExpression in the assert at the top add behind tok::kw___builtin_omp_required_simd_align
----------------------------------------

  , tok::kw_hashof, tok::kw_joaat
  
in function ParseUnaryExprOrTypeTraitExpression under the else if(OpTok.is(tok::kw___builtin_omp_required_simd_align)) statement add
----------------------------------------

  else if(OpTok.isOneOf(tok::kw_hashof, tok::kw_joaat))
	  ExprKind = UETT_JenkinsHash;

=====================================================================
llvm_src\tools\clang\lib\Sema\SemaExpr.cpp
=====================================================================

in function CreateUnaryExprOrTypeTraitExpr under the else if (ExprKind == UETT_OpenMPRequiredSimdAlign) statement add
----------------------------------------

else if (ExprKind == UETT_JenkinsHash)
{
  isInvalid = !isa<StringLiteral>(E->IgnoreParens());
  if(isInvalid)
	  Diag(E->getExprLoc(), diag::err_joaat_nonconstant_string_argument);
}

=====================================================================
llvm_srctools\clang\tools\extra\CMakeLists.txt
=====================================================================

add to bottom
----------------------------------------
add_subdirectory(SC-CL)

